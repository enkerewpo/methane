// Generated by CIRCT firtool-1.48.0
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module Oscillator(
  input         clock,
                reset,
                io_en,
  input  [31:0] io_freq,
  output [15:0] io_out
);

  wire [255:0][15:0] _GEN =
    {16'hFE16,
     16'hFC2B,
     16'hFA41,
     16'hF858,
     16'hF670,
     16'hF48A,
     16'hF2A5,
     16'hF0C3,
     16'hEEE2,
     16'hED05,
     16'hEB2A,
     16'hE953,
     16'hE77F,
     16'hE5AF,
     16'hE3E3,
     16'hE21B,
     16'hE058,
     16'hDE99,
     16'hDCE0,
     16'hDB2D,
     16'hD97F,
     16'hD7D6,
     16'hD635,
     16'hD499,
     16'hD304,
     16'hD177,
     16'hCFF0,
     16'hCE71,
     16'hCCF9,
     16'hCB89,
     16'hCA22,
     16'hC8C2,
     16'hC76C,
     16'hC61D,
     16'hC4D8,
     16'hC39C,
     16'hC26A,
     16'hC140,
     16'hC021,
     16'hBF0B,
     16'hBDFF,
     16'hBCFE,
     16'hBC07,
     16'hBB1A,
     16'hBA38,
     16'hB961,
     16'hB894,
     16'hB7D3,
     16'hB71D,
     16'hB672,
     16'hB5D2,
     16'hB53E,
     16'hB4B5,
     16'hB438,
     16'hB3C6,
     16'hB361,
     16'hB307,
     16'hB2B9,
     16'hB277,
     16'hB241,
     16'hB217,
     16'hB1F9,
     16'hB1E7,
     16'hB1E0,
     16'hB1E7,
     16'hB1F9,
     16'hB217,
     16'hB241,
     16'hB277,
     16'hB2B9,
     16'hB307,
     16'hB361,
     16'hB3C6,
     16'hB438,
     16'hB4B5,
     16'hB53E,
     16'hB5D2,
     16'hB672,
     16'hB71D,
     16'hB7D3,
     16'hB894,
     16'hB961,
     16'hBA38,
     16'hBB1A,
     16'hBC07,
     16'hBCFE,
     16'hBDFF,
     16'hBF0B,
     16'hC021,
     16'hC140,
     16'hC26A,
     16'hC39C,
     16'hC4D8,
     16'hC61D,
     16'hC76C,
     16'hC8C2,
     16'hCA22,
     16'hCB89,
     16'hCCF9,
     16'hCE71,
     16'hCFF0,
     16'hD177,
     16'hD304,
     16'hD499,
     16'hD635,
     16'hD7D6,
     16'hD97F,
     16'hDB2D,
     16'hDCE0,
     16'hDE99,
     16'hE058,
     16'hE21B,
     16'hE3E3,
     16'hE5AF,
     16'hE77F,
     16'hE953,
     16'hEB2A,
     16'hED05,
     16'hEEE2,
     16'hF0C3,
     16'hF2A5,
     16'hF48A,
     16'hF670,
     16'hF858,
     16'hFA41,
     16'hFC2B,
     16'hFE16,
     16'h0,
     16'h1EA,
     16'h3D5,
     16'h5BF,
     16'h7A8,
     16'h990,
     16'hB76,
     16'hD5B,
     16'hF3D,
     16'h111E,
     16'h12FB,
     16'h14D6,
     16'h16AD,
     16'h1881,
     16'h1A51,
     16'h1C1D,
     16'h1DE5,
     16'h1FA8,
     16'h2167,
     16'h2320,
     16'h24D3,
     16'h2681,
     16'h282A,
     16'h29CB,
     16'h2B67,
     16'h2CFC,
     16'h2E89,
     16'h3010,
     16'h318F,
     16'h3307,
     16'h3477,
     16'h35DE,
     16'h373E,
     16'h3894,
     16'h39E3,
     16'h3B28,
     16'h3C64,
     16'h3D96,
     16'h3EC0,
     16'h3FDF,
     16'h40F5,
     16'h4201,
     16'h4302,
     16'h43F9,
     16'h44E6,
     16'h45C8,
     16'h469F,
     16'h476C,
     16'h482D,
     16'h48E3,
     16'h498E,
     16'h4A2E,
     16'h4AC2,
     16'h4B4B,
     16'h4BC8,
     16'h4C3A,
     16'h4C9F,
     16'h4CF9,
     16'h4D47,
     16'h4D89,
     16'h4DBF,
     16'h4DE9,
     16'h4E07,
     16'h4E19,
     16'h4E20,
     16'h4E19,
     16'h4E07,
     16'h4DE9,
     16'h4DBF,
     16'h4D89,
     16'h4D47,
     16'h4CF9,
     16'h4C9F,
     16'h4C3A,
     16'h4BC8,
     16'h4B4B,
     16'h4AC2,
     16'h4A2E,
     16'h498E,
     16'h48E3,
     16'h482D,
     16'h476C,
     16'h469F,
     16'h45C8,
     16'h44E6,
     16'h43F9,
     16'h4302,
     16'h4201,
     16'h40F5,
     16'h3FDF,
     16'h3EC0,
     16'h3D96,
     16'h3C64,
     16'h3B28,
     16'h39E3,
     16'h3894,
     16'h373E,
     16'h35DE,
     16'h3477,
     16'h3307,
     16'h318F,
     16'h3010,
     16'h2E89,
     16'h2CFC,
     16'h2B67,
     16'h29CB,
     16'h282A,
     16'h2681,
     16'h24D3,
     16'h2320,
     16'h2167,
     16'h1FA8,
     16'h1DE5,
     16'h1C1D,
     16'h1A51,
     16'h1881,
     16'h16AD,
     16'h14D6,
     16'h12FB,
     16'h111E,
     16'hF3D,
     16'hD5B,
     16'hB76,
     16'h990,
     16'h7A8,
     16'h5BF,
     16'h3D5,
     16'h1EA,
     16'h0};
  reg  [31:0]        hold_tick;
  reg  [31:0]        run_tick;
  reg  [15:0]        idx;
  always @(posedge clock) begin
    automatic logic [31:0] _hold_tick_T_1;
    _hold_tick_T_1 = 32'h3B9ACA / io_freq;
    if (reset) begin
      hold_tick <= _hold_tick_T_1;
      run_tick <= 32'h0;
      idx <= 16'h0;
    end
    else begin
      automatic logic _GEN_0;
      _GEN_0 = run_tick == hold_tick;
      if (io_en) begin
        hold_tick <= _hold_tick_T_1;
        if (_GEN_0)
          run_tick <= 32'h0;
        else
          run_tick <= run_tick + 32'h1;
      end
      if (io_en & _GEN_0) begin
        if (idx == 16'h100)
          idx <= 16'h0;
        else
          idx <= idx + 16'h1;
      end
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin
      automatic logic [31:0] _RANDOM[0:2];
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [1:0] i = 2'h0; i < 2'h3; i += 2'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        hold_tick = _RANDOM[2'h0];
        run_tick = _RANDOM[2'h1];
        idx = _RANDOM[2'h2][15:0];
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_out = _GEN[idx[7:0]];
endmodule

